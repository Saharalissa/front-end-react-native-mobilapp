{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\front-end-react-native-mobilapp\\\\components\\\\chat\\\\ChatApp.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\n\nvar ChatApp = function (_Component) {\n  _inherits(ChatApp, _Component);\n\n  var _super = _createSuper(ChatApp);\n\n  function ChatApp() {\n    var _this;\n\n    _classCallCheck(this, ChatApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: ''\n    };\n\n    _this.onChangeText = function (name) {\n      return _this.setState({\n        name: name\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatApp, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, React.createElement(TextInput, {\n        onChangeText: this.onChangeText,\n        style: styles.nameInput,\n        placeHolder: \"your name\",\n        value: this.state.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return ChatApp;\n}(Component);\n\nvar offset = 24;\nvar styles = StyleSheet.create({\n  nameInput: {\n    height: offset * 2,\n    margin: offset,\n    paddingHorizontal: offset,\n    borderColor: '#111111',\n    borderWidth: 1\n  }\n});\nexport default ChatApp;","map":{"version":3,"sources":["C:/Users/User/Desktop/front-end-react-native-mobilapp/components/chat/ChatApp.js"],"names":["React","Component","ChatApp","state","name","onChangeText","setState","styles","nameInput","offset","StyleSheet","create","height","margin","paddingHorizontal","borderColor","borderWidth"],"mappings":";;;;;;;;;;;AA0HA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;IAGMC,O;;;;;;;;;;;;;;;UACFC,K,GAAQ;AAAEC,MAAAA,IAAI,EAAE;AAAR,K;;UACRC,Y,GAAe,UAAAD,IAAI;AAAA,aAAI,MAAKE,QAAL,CAAc;AAAEF,QAAAA,IAAI,EAAJA;AAAF,OAAd,CAAJ;AAAA,K;;;;;;;6BACV;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACA,QAAA,YAAY,EAAE,KAAKC,YADnB;AAEE,QAAA,KAAK,EAAEE,MAAM,CAACC,SAFhB;AAGE,QAAA,WAAW,EAAC,WAHd;AAIE,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWC,IAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAUD;;;;EAdiBH,S;;AAmBtB,IAAMQ,MAAM,GAAG,EAAf;AACA,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPI,IAAAA,MAAM,EAAEH,MAAM,GAAG,CADV;AAEPI,IAAAA,MAAM,EAAEJ,MAFD;AAGPK,IAAAA,iBAAiB,EAAEL,MAHZ;AAIPM,IAAAA,WAAW,EAAE,SAJN;AAKPC,IAAAA,WAAW,EAAE;AALN;AADkB,CAAlB,CAAf;AASA,eAAed,OAAf","sourcesContent":["// // @refresh reset\r\n\r\n// import React, { useState, useEffect, useCallback } from 'react'\r\n// // the user will be save in the local storege   so wwe will use use state \r\n// // use effect hook  to render the copmponent \r\n// import { GiftedChat } from 'react-native-gifted-chat'\r\n// import AsyncStorage from '@react-native-community/async-storage'\r\n// // \r\n// import { StyleSheet, TextInput, View, YellowBox, Button } from 'react-native'\r\n// import firebase from 'firebase/app'\r\n// import 'firebase/firestore'      \r\n\r\n\r\n// const firebaseConfig = {\r\n//         apiKey: \"AIzaSyBy_E4K8UYuBxeKHagieRgmLIaKsOGGdfA\",\r\n//         authDomain: \"chat-app-4e1ed.firebaseapp.com\",\r\n//         projectId: \"chat-app-4e1ed\",\r\n//         storageBucket: \"chat-app-4e1ed.appspot.com\",\r\n//         messagingSenderId: \"1081745367221\",\r\n//         appId: \"1:1081745367221:web:c026781c5090e4e5139efc\",\r\n//         measurementId: \"G-H1BSSFBPMZ\"\r\n//       };\r\n\r\n// // Initialize Firebase\r\n\r\n//     firebase.initializeApp(firebaseConfig);\r\n\r\n\r\n// // YellowBox.ignoreWarnings(['Setting a timer for a long period of time'])\r\n\r\n// const db = firebase.firestore()\r\n// const chatsRef = db.collection('chats')\r\n\r\n// export default function ChatApp() {\r\n//     const [user, setUser] = useState(null)    // cuse we dont have a user at the  bignning\r\n//     const [name, setName] = useState('')\r\n//     const [messages, setMessages] = useState([])\r\n\r\n//     useEffect(() => {\r\n//         readUser()\r\n//         const unsubscribe = chatsRef.onSnapshot((querySnapshot) => {\r\n//             const messagesFirestore = querySnapshot\r\n//                 .docChanges()\r\n//                 .filter(({ type }) => type === 'added')\r\n//                 .map(({ doc }) => {\r\n//                     const message = doc.data()\r\n//                     //createdAt is firebase.firestore.Timestamp instance\r\n//                     //https://firebase.google.com/docs/reference/js/firebase.firestore.Timestamp\r\n//                     return { ...message, createdAt: message.createdAt.toDate() }\r\n//                 })\r\n//                 .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\r\n//             appendMessages(messagesFirestore)\r\n//         })\r\n//         return () => unsubscribe()\r\n//     }, [])\r\n\r\n//     const appendMessages = useCallback(\r\n//         (messages) => {\r\n//             setMessages((previousMessages) => GiftedChat.append(previousMessages, messages))\r\n//         },\r\n//         [messages]\r\n//     )\r\n//   // async storege it will look if you have a user \r\n//     async function readUser() {\r\n//         const user = await AsyncStorage.getItem('user')\r\n//         console.log (user)     \r\n//         // here he will read the id and the user name but i dont know from where \r\n//         if (user) {\r\n//             setUser(JSON.parse(user))\r\n//         }\r\n//     }\r\n//     async function handlePress() {\r\n//         const _id = Math.random().toString(36).substring(7)\r\n//         const user = { _id, name }\r\n//         await AsyncStorage.setItem('user', JSON.stringify(user))\r\n//         setUser(user)\r\n//         AsyncStorage.clear()\r\n//     }\r\n//     async function handleSend(messages) {\r\n//         const writes = messages.map((m) => chatsRef.add(m))\r\n//         await Promise.all(writes)\r\n        \r\n//     }\r\n\r\n//     if (!user) {\r\n//         return (\r\n//             <View style={styles.container}>\r\n//                 <TextInput style={styles.input} placeholder=\"Enter your name\" value={name} onChangeText={setName} />\r\n//                 <Button onPress={handlePress} title=\"Enter the chat\" />\r\n//             </View>\r\n//         )\r\n//     }\r\n//     return <GiftedChat messages={messages} user={user} onSend={handleSend} />\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//         flex: 1,\r\n//         backgroundColor: '#fff',\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center',\r\n//         padding: 30,\r\n//     },\r\n//     input: {\r\n//         height: 50,\r\n//         width: '100%',\r\n//         borderWidth: 1,\r\n//         padding: 15,\r\n//         marginBottom: 20,\r\n//         borderColor: 'gray',\r\n//     },\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n// // AsyncStorage.clear()\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport { TextInput } from 'react-native';\r\nclass ChatApp extends Component {\r\n    state = { name: '' } \r\n    onChangeText = name => this.setState({ name }); // 1.\r\n    render() {\r\n      return (\r\n        <View>\r\n          <TextInput\r\n          onChangeText={this.onChangeText}\r\n            style={styles.nameInput}\r\n            placeHolder=\"your name\"\r\n            value={this.state.name}\r\n          />\r\n        </View>\r\n      );\r\n    }\r\n\r\n\r\n\r\n}\r\nconst offset = 24;\r\nconst styles = StyleSheet.create({\r\n    nameInput: { // 3. <- Add a style for the input\r\n        height: offset * 2,\r\n        margin: offset,\r\n        paddingHorizontal: offset,\r\n        borderColor: '#111111',\r\n        borderWidth: 1,\r\n      },\r\n});\r\nexport default ChatApp;\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}