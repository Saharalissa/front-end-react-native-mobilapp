{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React from 'react';\r\n// import { View, Text, Image, Button, Alert } from 'react-native';\r\n// // import * as ImagePicker from 'expo-image-picker';\r\n// import * as firebase from 'firebase';\r\n// import * as ImagePicker from 'expo-image-picker';\r\n// import {launchCamera, launchImageLibrary} from 'react-native-image-picker';\r\n// import Constants from 'expo-constants';\r\n\r\n\r\n// export default class Photo extends React.Component {\r\n//   static navigationOptions= {  \r\n//     header: null,\r\n//   };\r\n\r\n//   onChooseImagePress = async () => {\r\n//     let result = await ImagePicker.launchCameraAsync();\r\n//       if(!result.cancelled) {\r\n//         this.uploadImage(result.uri, 'test_image')\r\n//         .then(() => {\r\n//           // Alert.alert('success')\r\n//           Alert.alert(JSON.stringify(responseJson))\r\n//         })\r\n//         .catch((error) => {\r\n//           Alert.alert(error)\r\n//         })\r\n//       }\r\n//     };\r\n  \r\n//     uploadImage = async (uri) => {\r\n//       // const response = await fetch(uri, imageName)\r\n//       const response = await fetch(\"https://aboud-3f2c4.firebaseio.com\", {\r\n//   method: \"POST\",\r\n//   headers: {\r\n//     Accept: \"application/json\",\r\n//     \"Content-Type\": \"application/json\"\r\n//   },\r\n//   body: JSON.stringify({\r\n//     pin:212,\r\n//   })\r\n// })\r\n//       const blob = await response.blob();\r\n\r\n//       var ref = firebase.storage().ref().chiled(\"images/\"+ imageName)\r\n//       return ref.put(blob)\r\n//     }\r\n\r\n//   render() {\r\n//     // const { photo } = this.state;\r\n//     return (\r\n//       <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n//         {/* {photo && (\r\n//           <Image\r\n//             source={{ uri: photo.uri }}\r\n//             style={{ width: 300, height: 300 }}\r\n//           />\r\n//         )} */}\r\n//         <Button title=\"Choose image\" onPress={this.onChooseImagePress} />\r\n//       </View>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// imagepicker\r\n// import { StatusBar } from 'expo-status-bar';\r\n// import React, {useEffect, useState} from 'react';\r\n// import { StyleSheet, Text, View, Platform, Button, Image, TextInput } from 'react-native';\r\n// import Photo from './components/Authentication/imagePicker';\r\n// import Login from './components/Authentication/login';\r\n// import Signup from './components/Authentication/signup';\r\n// import * as ImagePicker from 'expo-image-picker';\r\n// import {launchCamera, launchImageLibrary} from 'react-native-image-picker';\r\n// import Constants from 'expo-constants';\r\n// import axios from 'axios';\r\n\r\n// export default function App() {\r\n//   const [image, setImage] = useState(null);\r\n//   const [userData, setUserData] = useState({  username: '', email: '', password: '', phoneNumber: '', location: '', image: null});\r\n\r\n\r\n// const clickHandler = () => {\r\n   \r\n//     axios.post('http://192.168.1.130:5000/signup', userData) //connected to the server port\r\n//     .then( req=> {\r\n//      console.log(req.data)\r\n//     //  localStorage.setItem('token', req.data.token)\r\n//      console.log(req.data.token)\r\n//      // setSavedUserData(savedUserData)\r\n//      console.log(userData)\r\n//      console.log(\"success\")\r\n//     })\r\n//     .catch((error) => {\r\n//         console.log(error)\r\n//         console.log(\"error\")\r\n//     })\r\n//  }\r\n\r\n//   useEffect(() => {\r\n//     (async () => {\r\n//       if (Platform.OS !== 'web') {\r\n//         const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n//         if (status !== 'granted') {\r\n//           alert('Sorry, we need camera roll permissions to make this work!');\r\n//         }\r\n//       }\r\n//     })();\r\n//   }, []);\r\n\r\n//   const pickImage = async () => {\r\n//     let result = await ImagePicker.launchImageLibraryAsync({\r\n//       mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n//       allowsEditing: true,\r\n//       aspect: [4, 3],\r\n//       quality: 1,\r\n//     });\r\n\r\n//     console.log(result);\r\n\r\n//     if (!result.cancelled) {\r\n//       setImage(result.uri);\r\n//     }\r\n//   };\r\n\r\n\r\n//   return (\r\n    \r\n//     <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n//       <Signup/>\r\n//       {/* <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\r\n//       {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\r\n//       <Button title=\"save image\" onPress={saveImage} /> */}\r\n//     </View>\r\n//   );\r\n// }\r\n\r\n// // export default function App() {\r\n// //   // const [name, setName] = useState('Sahar')\r\n// //   return (\r\n// //     <View style={styles.container}>\r\n// //       <Text>hello world!</Text>\r\n      \r\n// //       {/* <Text>Mobile app</Text> */}\r\n  \r\n// //       {/* <Login /> */}\r\n// //       {/* <Signup /> */}\r\n// //       <Photo />\r\n     \r\n// //       <StatusBar style=\"auto\" />\r\n// //     </View>\r\n// //   );\r\n// // }\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     backgroundColor: '#fff',\r\n//     alignItems: 'center',\r\n//     justifyContent: 'center',\r\n//   },\r\n// });\r\n"]},"metadata":{},"sourceType":"script"}