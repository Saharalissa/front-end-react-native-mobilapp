{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/database\";\n\nvar Fire = function () {\n  function Fire() {\n    var _this = this;\n\n    _classCallCheck(this, Fire);\n\n    this.init = function () {\n      if (!firebase.apps.length) {\n        firebase.initializeApp({\n          apiKey: \"AIzaSyBKNb6-9YZTagBqbvxqwnnGE3UAXNi0sjw\",\n          authDomain: \"realtime-7373d.firebaseapp.com\",\n          projectId: \"realtime-7373d\",\n          storageBucket: \"realtime-7373d.appspot.com\",\n          messagingSenderId: \"634481680479\",\n          appId: \"1:634481680479:web:d0af96f8d573be0262bbea\",\n          measurementId: \"G-JS41HKH14D\"\n        });\n      }\n    };\n\n    this.observeAuth = function () {\n      return firebase.auth().onAuthStateChanged(_this.onAuthStateChanged);\n    };\n\n    this.onAuthStateChanged = function (user) {\n      if (!user) {\n        try {\n          firebase.auth().signInAnonymously();\n        } catch (_ref) {\n          var message = _ref.message;\n          alert(message);\n        }\n      }\n    };\n\n    this.parse = function (snapshot) {\n      var _snapshot$val = snapshot.val(),\n          numberStamp = _snapshot$val.timestamp,\n          text = _snapshot$val.text,\n          user = _snapshot$val.user;\n\n      var _id = snapshot.key;\n      var timestamp = new Date(numberStamp);\n      var message = {\n        _id: _id,\n        timestamp: timestamp,\n        text: text,\n        user: user\n      };\n      return message;\n    };\n\n    this.on = function (callback) {\n      return _this.ref.limitToLast(20).on('child_added', function (snapshot) {\n        return callback(_this.parse(snapshot));\n      });\n    };\n\n    this.send = function (messages) {\n      for (var i = 0; i < messages.length; i++) {\n        var _messages$i = messages[i],\n            text = _messages$i.text,\n            user = _messages$i.user;\n        var message = {\n          text: text,\n          user: user,\n          timestamp: _this.timestamp\n        };\n\n        _this.append(message);\n      }\n    };\n\n    this.append = function (message) {\n      return _this.ref.push(message);\n    };\n\n    this.init();\n    this.observeAuth();\n  }\n\n  _createClass(Fire, [{\n    key: \"off\",\n    value: function off() {\n      this.ref.off();\n    }\n  }, {\n    key: \"uid\",\n    get: function get() {\n      return (firebase.auth().currentUser || {}).uid;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return firebase.database().ref('messages');\n    }\n  }, {\n    key: \"timestamp\",\n    get: function get() {\n      return firebase.database.ServerValue.TIMESTAMP;\n    }\n  }]);\n\n  return Fire;\n}();\n\nFire.shared = new Fire();\nexport default Fire;","map":{"version":3,"sources":["C:/Users/User/Desktop/front-end-react-native-mobilapp/Fire.js"],"names":["firebase","Fire","init","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","observeAuth","auth","onAuthStateChanged","user","signInAnonymously","message","alert","parse","snapshot","val","numberStamp","timestamp","text","_id","key","Date","on","callback","ref","limitToLast","send","messages","i","append","push","off","currentUser","uid","database","ServerValue","TIMESTAMP","shared"],"mappings":"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","sourcesContent":["// import firebase from 'firebase'; \r\n\r\n\r\n// class Fire {\r\n//     constructor() {\r\n//         this.init();\r\n//         // if it doesnâ€™t exist then we want to sign in anonymously.\r\n//         this.observeAuth();\r\n//     }\r\n\r\n//     init = () =>\r\n//     firebase.initializeApp({\r\n//         apiKey: \"AIzaSyBy_E4K8UYuBxeKHagieRgmLIaKsOGGdfA\",\r\n//         authDomain: \"chat-app-4e1ed.firebaseapp.com\",\r\n//         databaseURL: \"https://chat-app-4e1ed-default-rtdb.firebaseio.com\",\r\n//         projectId: \"chat-app-4e1ed\",\r\n//         storageBucket: \"chat-app-4e1ed.appspot.com\",\r\n//         messagingSenderId: \"1081745367221\",\r\n//         appId: \"1:1081745367221:web:c026781c5090e4e5139efc\",\r\n//         measurementId: \"G-H1BSSFBPMZ\"\r\n//     });\r\n\r\n//     observeAuth = () =>\r\n//     firebase.auth().onAuthStateChanged(this.onAuthStateChanged);\r\n\r\n//     onAuthStateChanged = user => {\r\n//         if (!user) {\r\n//           try {\r\n//             firebase.auth().signInAnonymously();\r\n//         } catch ({ message }) {\r\n//           alert(message);\r\n//         }\r\n\r\n//     }\r\n// };\r\n\r\n// get uid() {\r\n//     return (firebase.auth().currentUser || {}).uid;\r\n//   }\r\n\r\n\r\n// get ref() {\r\n//     return firebase.database().ref('messages');  // this is a references location to our data base which is /messages\r\n//   }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n//       parse = snapshot => {\r\n\r\n//         const { timestamp: numberStamp, text, user } = snapshot.val();\r\n//         const { key: _id } = snapshot;\r\n//         const timestamp = new Date(numberStamp);\r\n//         const message = {\r\n//             _id,\r\n//             timestamp,\r\n//             text,\r\n//             user,\r\n//           };\r\n//           console.log(message)\r\n//          return message;\r\n//     }\r\n\r\n//   on = callback =>\r\n//     this.ref\r\n//       .limitToLast(20)\r\n//       .on('child_added', snapshot => callback(this.parse(snapshot)));\r\n\r\n//       get timestamp() {\r\n//         return firebase.database.ServerValue.TIMESTAMP;\r\n//       }\r\n\r\n\r\n\r\n\r\n//       //Create a shape that if good for firebase and save it to our server\r\n//       send = messages => {\r\n//         for (let i = 0; i < messages.length; i++) {\r\n//           const { text, user } = messages[i];\r\n        \r\n//           const message = {\r\n//             text,\r\n//             user,\r\n//             timestamp: this.timestamp,\r\n//           };\r\n//           console.log(this)\r\n//           this.append(message);\r\n          \r\n//         }\r\n//       };\r\n//        //The append function will save the message object with a unique ID\r\n      \r\n//        append = message => this.ref.push(message);\r\n    \r\n//     off() {\r\n//         this.ref.off();\r\n//       }\r\n\r\n// }\r\n// Fire.shared = new Fire();\r\n\r\n\r\n\r\n\r\n// export default Fire;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/database\";\r\n\r\nclass Fire {\r\n  constructor() {\r\n    this.init();    // this init will inislize our fire base will our project \r\n    this.observeAuth();\r\n  }\r\n\r\n  // connection to the firebase database, unique credentials from Project Settings>Your apps\r\n  init = () => {\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp({\r\n        apiKey: \"AIzaSyBKNb6-9YZTagBqbvxqwnnGE3UAXNi0sjw\",\r\n    authDomain: \"realtime-7373d.firebaseapp.com\",\r\n    projectId: \"realtime-7373d\",\r\n    storageBucket: \"realtime-7373d.appspot.com\",\r\n    messagingSenderId: \"634481680479\",\r\n    appId: \"1:634481680479:web:d0af96f8d573be0262bbea\",\r\n    measurementId: \"G-JS41HKH14D\"\r\n      });\r\n    }\r\n  };\r\n\r\n  // this will auth our user\r\n  observeAuth = () =>\r\n    firebase.auth().onAuthStateChanged(this.onAuthStateChanged);\r\n\r\n  // authenticating user and allowing anonymous users   how send the msg\r\n  onAuthStateChanged = user => {\r\n    if (!user) {\r\n      try {\r\n        firebase.auth().signInAnonymously();\r\n      } catch ({ message }) {\r\n        alert(message);\r\n      }\r\n    }\r\n  };\r\n\r\n  // getting unique credentials(id) for the sender \r\n  get uid() {\r\n    return (firebase.auth().currentUser || {}).uid;\r\n  }\r\n\r\n  // referencing the 'messages' table in the firebase database  //ref mean the node(table) in data base \r\n  get ref() {\r\n    return firebase.database().ref('messages');\r\n  }\r\n\r\n  // formating the message in order to be displayed nicely\r\n  parse = snapshot => {\r\n    const { timestamp: numberStamp, text, user } = snapshot.val();\r\n    const { key: _id } = snapshot;\r\n    const timestamp = new Date(numberStamp);\r\n    const message = {\r\n      _id,\r\n      timestamp,\r\n      text,\r\n      user,\r\n    };\r\n    return message;\r\n  };\r\n\r\n  // getting messages to be displayed from the database   // get msg from data base\r\n  on = callback =>\r\n    this.ref\r\n      .limitToLast(20)\r\n      .on('child_added', snapshot => callback(this.parse(snapshot)));\r\n\r\n  // timestamp for the message\r\n  get timestamp() {\r\n    return firebase.database.ServerValue.TIMESTAMP;\r\n  }\r\n\r\n  // sending message to be stored in the database\r\n  send = messages => {\r\n    for (let i = 0; i < messages.length; i++) {\r\n      const { text, user } = messages[i];\r\n      const message = {\r\n        text,\r\n        user,\r\n        timestamp: this.timestamp,\r\n      };\r\n      this.append(message);\r\n    }\r\n  };\r\n\r\n  // appening the message in the chat\r\n  append = message => this.ref.push(message);\r\n\r\n  // closing connection\r\n  off() {\r\n    this.ref.off();\r\n  }\r\n}\r\n\r\nFire.shared = new Fire();\r\nexport default Fire;"]},"metadata":{},"sourceType":"module"}