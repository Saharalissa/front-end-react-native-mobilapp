{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Thersis-Dawerha\\\\front-end-react-native-mobilapp\\\\components\\\\notifications\\\\notifications.js\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-community/async-storage';\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nvar register = function register(pushToken) {\n  var userID;\n  return _regeneratorRuntime.async(function register$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('user_id'));\n\n        case 2:\n          userID = _context2.sent;\n          axios.post('http://192.168.1.94:5000/expoPushTokens', {\n            token: pushToken,\n            userID: userID\n          }).then(function (res) {\n            console.log(res);\n            console.log(res.data);\n          }).catch(function (error) {\n            return console.log(error);\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function Notification() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n\n  var updateChecker = function updateChecker() {\n    var userID;\n    return _regeneratorRuntime.async(function updateChecker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user_id'));\n\n          case 2:\n            userID = _context3.sent;\n            axios.post('http://192.168.1.94:5000/notifications', {\n              userID: userID\n            }).then(function (res) {\n              console.log(res.data.LENG);\n\n              if (res.data.LENG) {\n                sendPushNotification(res.data.info[0].token, res.data.info[0].action);\n              }\n            }).catch(function (error) {\n              return console.log(error);\n            });\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  setInterval(updateChecker, 2000);\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  });\n}\n\nfunction sendPushNotification(expoPushToken, action) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: 'TEST',\n            body: \"your order has been \" + action,\n            data: {\n              data: 'goes here'\n            }\n          };\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context5.next = 21;\n            break;\n          }\n\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context5.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context5.next = 12;\n            break;\n          }\n\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context5.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context5.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context5.abrupt(\"return\");\n\n        case 15:\n          _context5.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context5.sent.data;\n          console.log(\"token:\", token);\n          _context5.next = 22;\n          break;\n\n        case 21:\n          alert('Must use physical device for Push Notifications');\n\n        case 22:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context5.abrupt(\"return\", token);\n\n        case 24:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/Thersis-Dawerha/front-end-react-native-mobilapp/components/notifications/notifications.js"],"names":["Constants","Notifications","Permissions","React","useState","useEffect","useRef","axios","AsyncStorage","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","register","pushToken","getItem","userID","post","token","then","res","console","log","data","catch","error","Notification","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","updateChecker","LENG","sendPushNotification","info","action","setInterval","registerForPushNotificationsAsync","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","removeNotificationSubscription","message","to","sound","title","body","fetch","method","headers","Accept","JSON","stringify","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\r\nimport * as Notifications from 'expo-notifications';\r\nimport * as Permissions from 'expo-permissions';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Platform } from 'react-native';\r\nimport  axios from 'axios';\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\n// import {acceptation } from '../../../front-end-react-website/src/components/';\r\n// import  axios from 'axios';\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\nconst register = async (pushToken) => {\r\n  const userID = await AsyncStorage.getItem('user_id')\r\n//   console.log(userID)\r\n  axios.post('http://192.168.1.94:5000/expoPushTokens', { token: pushToken, userID:userID})\r\n.then(res => {\r\n  console.log(res);\r\n  console.log(res.data)\r\n})\r\n.catch(error => console.log(error));\r\n}\r\nexport default function Notification() {\r\n  const [expoPushToken, setExpoPushToken] = useState('');\r\n  const [notification, setNotification] = useState(false);\r\n  const notificationListener = useRef();\r\n  const responseListener = useRef();\r\n const updateChecker = async () => {\r\n  const userID = await AsyncStorage.getItem('user_id')\r\n//   console.log(userID)\r\n   axios.post('http://192.168.1.94:5000/notifications', {userID:userID})\r\n          .then(res => {\r\n            // console.log(\"itemID:\",res.data[0][\"COUNT(*)\"])\r\n            console.log(res.data.LENG)\r\n                 if(res.data.LENG){\r\n                  // console.log(res.data)\r\n                  // console.log(res.data.info[0].token)\r\n                  //  console.log(res.data.info[0].action)\r\n                  sendPushNotification(res.data.info[0].token,res.data.info[0].action)\r\n                 }\r\n        })\r\n        .catch(error => console.log(error));\r\n      }\r\n        setInterval(updateChecker, 2000)\r\n  useEffect(() => {\r\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n    // This listener is fired whenever a notification is received while the app is foregrounded\r\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n      setNotification(notification);\r\n    });\r\n    // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\r\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n      console.log(response);\r\n    });\r\n    return () => {\r\n      Notifications.removeNotificationSubscription(notificationListener);\r\n      Notifications.removeNotificationSubscription(responseListener);\r\n    };\r\n  }, []);\r\n  return (\r\n    <View>\r\n    </View>\r\n  );\r\n}\r\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\r\nasync function sendPushNotification(expoPushToken,action) {\r\n  const message = {\r\n    to: expoPushToken,\r\n    sound: 'default',\r\n    title: 'TEST',\r\n    body: `your order has been ${action}`,\r\n    data: { data: 'goes here' },\r\n  };\r\n  await fetch('https://exp.host/--/api/v2/push/send', {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Accept-encoding': 'gzip, deflate',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(message),\r\n  });\r\n}\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(\"token:\",token);\r\n    // register(token)\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n  return token;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}