{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import Constants from 'expo-constants';\r\n// import * as Notifications from 'expo-notifications';\r\n// import * as Permissions from 'expo-permissions';\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { View, Platform } from 'react-native';\r\n// import  axios from 'axios';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n// // import {acceptation } from '../../../front-end-react-website/src/components/';\r\n// // import  axios from 'axios';\r\n// Notifications.setNotificationHandler({\r\n//   handleNotification: async () => ({\r\n//     shouldShowAlert: true,\r\n//     shouldPlaySound: false,\r\n//     shouldSetBadge: false,\r\n//   }),\r\n// });\r\n// const register = async (pushToken) => {\r\n//   const userID = await AsyncStorage.getItem('user_id')\r\n// //   console.log(userID)\r\n//   axios.post('http://192.168.1.94:5000/expoPushTokens', { token: pushToken, userID:userID})\r\n// .then(res => {\r\n//   console.log(res);\r\n//   console.log(res.data)\r\n// })\r\n// .catch(error => console.log(error));\r\n// }\r\n// export default function Notification() {\r\n//   const [expoPushToken, setExpoPushToken] = useState('');\r\n//   const [notification, setNotification] = useState(false);\r\n//   const notificationListener = useRef();\r\n//   const responseListener = useRef();\r\n//  const updateChecker = async () => {\r\n//   const userID = await AsyncStorage.getItem('user_id')\r\n// //   console.log(userID)\r\n//    axios.post('http://192.168.1.94:5000/notifications', {userID:userID})\r\n//           .then(res => {\r\n//             // console.log(\"itemID:\",res.data[0][\"COUNT(*)\"])\r\n//             console.log(res.data.LENG)\r\n//                  if(res.data.LENG){\r\n//                   // console.log(res.data)\r\n//                   // console.log(res.data.info[0].token)\r\n//                   //  console.log(res.data.info[0].action)\r\n//                   sendPushNotification(res.data.info[0].token,res.data.info[0].action)\r\n//                  }\r\n//         })\r\n//         .catch(error => console.log(error));\r\n//       }\r\n//         setInterval(updateChecker, 2000)\r\n//   useEffect(() => {\r\n//     registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n//     // This listener is fired whenever a notification is received while the app is foregrounded\r\n//     notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n//       setNotification(notification);\r\n//     });\r\n//     // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\r\n//     responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n//       console.log(response);\r\n//     });\r\n//     return () => {\r\n//       Notifications.removeNotificationSubscription(notificationListener);\r\n//       Notifications.removeNotificationSubscription(responseListener);\r\n//     };\r\n//   }, []);\r\n//   return (\r\n//     <View>\r\n//     </View>\r\n//   );\r\n// }\r\n// // Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\r\n// async function sendPushNotification(expoPushToken,action) {\r\n//   const message = {\r\n//     to: expoPushToken,\r\n//     sound: 'default',\r\n//     title: 'TEST',\r\n//     body: `your order has been ${action}`,\r\n//     data: { data: 'goes here' },\r\n//   };\r\n//   await fetch('https://exp.host/--/api/v2/push/send', {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       Accept: 'application/json',\r\n//       'Accept-encoding': 'gzip, deflate',\r\n//       'Content-Type': 'application/json',\r\n//     },\r\n//     body: JSON.stringify(message),\r\n//   });\r\n// }\r\n// async function registerForPushNotificationsAsync() {\r\n//   let token;\r\n//   if (Constants.isDevice) {\r\n//     const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\r\n//     let finalStatus = existingStatus;\r\n//     if (existingStatus !== 'granted') {\r\n//       const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n//       finalStatus = status;\r\n//     }\r\n//     if (finalStatus !== 'granted') {\r\n//       alert('Failed to get push token for push notification!');\r\n//       return;\r\n//     }\r\n//     token = (await Notifications.getExpoPushTokenAsync()).data;\r\n//     console.log(\"token:\",token);\r\n//     // register(token)\r\n//   } else {\r\n//     alert('Must use physical device for Push Notifications');\r\n//   }\r\n//   if (Platform.OS === 'android') {\r\n//     Notifications.setNotificationChannelAsync('default', {\r\n//       name: 'default',\r\n//       importance: Notifications.AndroidImportance.MAX,\r\n//       vibrationPattern: [0, 250, 250, 250],\r\n//       lightColor: '#FF231F7C',\r\n//     });\r\n//   }\r\n//   return token;\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}