{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\front-end-react-native-mobilapp\\\\components\\\\chat\\\\Chat.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport Fire from \"../../Fire\";\n\nvar Chat = function (_Component) {\n  _inherits(Chat, _Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      messages: [{\n        _id: 1,\n        text: 'Hello ',\n        createdAt: new Date(),\n        user: {\n          _id: 2,\n          name: 'React Native',\n          avatar: 'https://placeimg.com/140/140/any'\n        }\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Fire.shared.on(function (message) {\n        return _this2.setState(function (previousState) {\n          return {\n            messages: GiftedChat.append(previousState.messages, message)\n          };\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GiftedChat, {\n        messages: this.state.messages,\n        onSend: Fire.shared.send,\n        user: this.user,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Fire.shared.off();\n    }\n  }, {\n    key: \"user\",\n    get: function get() {\n      return {\n        name: this.props.route.params.name,\n        _id: Fire.shared.uid\n      };\n    }\n  }]);\n\n  return Chat;\n}(Component);\n\nexport { Chat as default };","map":{"version":3,"sources":["C:/Users/User/Desktop/front-end-react-native-mobilapp/components/chat/Chat.js"],"names":["React","Component","GiftedChat","Fire","Chat","state","messages","_id","text","createdAt","Date","user","name","avatar","shared","on","message","setState","previousState","append","send","off","props","route","params","uid"],"mappings":";;;;;;;;;;;AAsLA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP;;IAEqBC,I;;;;;;;;;;;;;;;UAEnBC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,CAER;AACEC,QAAAA,GAAG,EAAE,CADP;AAEEC,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,EAHb;AAKEC,QAAAA,IAAI,EAAE;AACJJ,UAAAA,GAAG,EAAE,CADD;AAEJK,UAAAA,IAAI,EAAE,cAFF;AAGJC,UAAAA,MAAM,EAAE;AAHJ;AALR,OAFQ;AADJ,K;;;;;;wCAwBY;AAAA;;AAElBV,MAAAA,IAAI,CAACW,MAAL,CAAYC,EAAZ,CAAe,UAAAC,OAAO;AAAA,eACpB,MAAI,CAACC,QAAL,CAAc,UAAAC,aAAa;AAAA,iBAAK;AAC9BZ,YAAAA,QAAQ,EAAEJ,UAAU,CAACiB,MAAX,CAAkBD,aAAa,CAACZ,QAAhC,EAA0CU,OAA1C;AADoB,WAAL;AAAA,SAA3B,CADoB;AAAA,OAAtB;AAKD;;;6BAEQ;AACP,aACE,oBAAC,UAAD;AACE,QAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWC,QADvB;AAEE,QAAA,MAAM,EAAEH,IAAI,CAACW,MAAL,CAAYM,IAFtB;AAGE,QAAA,IAAI,EAAE,KAAKT,IAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;;2CAEsB;AACrBR,MAAAA,IAAI,CAACW,MAAL,CAAYO,GAAZ;AACD;;;wBA5BU;AACT,aAAO;AACLT,QAAAA,IAAI,EAAE,KAAKU,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBZ,IADzB;AAELL,QAAAA,GAAG,EAAEJ,IAAI,CAACW,MAAL,CAAYW;AAFZ,OAAP;AAID;;;;EAxB+BxB,S;;SAAbG,I","sourcesContent":["// // @refresh reset\r\n\r\n// import React, { useState, useEffect, useCallback } from 'react'\r\n// // the user will be save in the local storege   so wwe will use use state \r\n// // use effect hook  to render the copmponent \r\n// import { GiftedChat } from 'react-native-gifted-chat'\r\n// import AsyncStorage from '@react-native-community/async-storage'\r\n// // \r\n// import { StyleSheet, TextInput, View, YellowBox, Button } from 'react-native'\r\n// import firebase from 'firebase/app'\r\n// import 'firebase/firestore'      \r\n\r\n\r\n// const firebaseConfig = {\r\n//         apiKey: \"AIzaSyBy_E4K8UYuBxeKHagieRgmLIaKsOGGdfA\",\r\n//         authDomain: \"chat-app-4e1ed.firebaseapp.com\",\r\n//         projectId: \"chat-app-4e1ed\",\r\n//         storageBucket: \"chat-app-4e1ed.appspot.com\",\r\n//         messagingSenderId: \"1081745367221\",\r\n//         appId: \"1:1081745367221:web:c026781c5090e4e5139efc\",\r\n//         measurementId: \"G-H1BSSFBPMZ\"\r\n//       };\r\n\r\n// // Initialize Firebase\r\n\r\n//     firebase.initializeApp(firebaseConfig);\r\n\r\n\r\n// // YellowBox.ignoreWarnings(['Setting a timer for a long period of time'])\r\n\r\n// const db = firebase.firestore()\r\n// const chatsRef = db.collection('chats')\r\n\r\n// export default function ChatApp() {\r\n//     const [user, setUser] = useState(null)    // cuse we dont have a user at the  bignning\r\n//     const [name, setName] = useState('')\r\n//     const [messages, setMessages] = useState([])\r\n\r\n//     useEffect(() => {\r\n//         readUser()\r\n//         const unsubscribe = chatsRef.onSnapshot((querySnapshot) => {\r\n//             const messagesFirestore = querySnapshot\r\n//                 .docChanges()\r\n//                 .filter(({ type }) => type === 'added')\r\n//                 .map(({ doc }) => {\r\n//                     const message = doc.data()\r\n//                     //createdAt is firebase.firestore.Timestamp instance\r\n//                     //https://firebase.google.com/docs/reference/js/firebase.firestore.Timestamp\r\n//                     return { ...message, createdAt: message.createdAt.toDate() }\r\n//                 })\r\n//                 .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\r\n//             appendMessages(messagesFirestore)\r\n//         })\r\n//         return () => unsubscribe()\r\n//     }, [])\r\n\r\n//     const appendMessages = useCallback(\r\n//         (messages) => {\r\n//             setMessages((previousMessages) => GiftedChat.append(previousMessages, messages))\r\n//         },\r\n//         [messages]\r\n//     )\r\n//   // async storege it will look if you have a user \r\n//     async function readUser() {\r\n//         const user = await AsyncStorage.getItem('user')\r\n//         console.log (user)     \r\n//         // here he will read the id and the user name but i dont know from where \r\n//         if (user) {\r\n//             setUser(JSON.parse(user))\r\n//         }\r\n//     }\r\n//     async function handlePress() {\r\n//         const _id = Math.random().toString(36).substring(7)\r\n//         const user = { _id, name }\r\n//         await AsyncStorage.setItem('user', JSON.stringify(user))\r\n//         setUser(user)\r\n//         AsyncStorage.clear()\r\n//     }\r\n//     async function handleSend(messages) {\r\n//         const writes = messages.map((m) => chatsRef.add(m))\r\n//         await Promise.all(writes)\r\n        \r\n//     }\r\n\r\n//     if (!user) {\r\n//         return (\r\n//             <View style={styles.container}>\r\n//                 <TextInput style={styles.input} placeholder=\"Enter your name\" value={name} onChangeText={setName} />\r\n//                 <Button onPress={handlePress} title=\"Enter the chat\" />\r\n//             </View>\r\n//         )\r\n//     }\r\n//     return <GiftedChat messages={messages} user={user} onSend={handleSend} />\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//         flex: 1,\r\n//         backgroundColor: '#fff',\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center',\r\n//         padding: 30,\r\n//     },\r\n//     input: {\r\n//         height: 50,\r\n//         width: '100%',\r\n//         borderWidth: 1,\r\n//         padding: 15,\r\n//         marginBottom: 20,\r\n//         borderColor: 'gray',\r\n//     },\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n// // AsyncStorage.clear()\r\n\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import { View, StyleSheet, Text } from 'react-native';\r\n// import { TextInput , TouchableOpacity} from 'react-native';\r\n\r\n// class ChatApp extends Component {\r\n//     state = { name: '' } \r\n \r\n//     onChangeText = name => this.setState({ name }); // 1.\r\n//     onPress = () => {\r\n//         this.props.navigation.navigate('Chat', { name: this.state.name });\r\n       \r\n//       }\r\n//     render() {\r\n//       return (\r\n//         <View>\r\n\r\n\r\n//         <Text style={styles.title}>Enter your name:</Text>\r\n//           <TextInput\r\n//           onChangeText={this.onChangeText}\r\n//             style={styles.nameInput}\r\n//             placeHolder=\"your name\"\r\n//             value={this.state.name}\r\n//           />\r\n//                <TouchableOpacity onPress={this.onPress}>\r\n//           <Text style={styles.buttonText}>Next</Text>\r\n//         </TouchableOpacity>\r\n//         </View>\r\n//       );\r\n//     }\r\n\r\n\r\n\r\n// }\r\n// const offset = 24;\r\n// const styles = StyleSheet.create({\r\n//     nameInput: { // 3. <- Add a style for the input\r\n//         height: offset * 2,\r\n//         margin: offset,\r\n//         paddingHorizontal: offset,\r\n//         borderColor: '#111111',\r\n//         borderWidth: 1,\r\n//       },\r\n//       title: { // 4.\r\n//         marginTop: offset,\r\n//         marginLeft: offset,\r\n//         fontSize: offset,\r\n//       },\r\n//       buttonText: { // 5.\r\n//         marginLeft: offset,\r\n//         fontSize: offset,\r\n//       },\r\n// });\r\n// export default ChatApp;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport { GiftedChat } from 'react-native-gifted-chat';\r\nimport Fire from '../../Fire'\r\n\r\nexport default class Chat extends Component {\r\n\r\n  state = {\r\n    messages: [\r\n      //example message with multiple properties\r\n      {\r\n        _id: 1, // message id\r\n        text: 'Hello ',\r\n        createdAt: new Date(), // date sent\r\n        // sender info\r\n        user: {\r\n          _id: 2, // user id\r\n          name: 'React Native', // username\r\n          avatar: 'https://placeimg.com/140/140/any', // profile picture\r\n        },\r\n      }\r\n    ,],\r\n  };\r\n\r\n  get user() {\r\n    return {\r\n      name: this.props.route.params.name,\r\n      _id: Fire.shared.uid,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // loading messages from the backend\r\n    Fire.shared.on(message =>\r\n      this.setState(previousState => ({\r\n        messages: GiftedChat.append(previousState.messages, message),\r\n      }))\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GiftedChat\r\n        messages={this.state.messages}\r\n        onSend={Fire.shared.send}\r\n        user={this.user}\r\n      />\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    Fire.shared.off();\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}