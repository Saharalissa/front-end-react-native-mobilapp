{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["\r\n\r\n\r\n// import firebase from 'firebase'; \r\n// import \"firebase/auth\";\r\n// import \"firebase/firestore\";\r\n// import \"firebase/database\";\r\n// import \"firebase/storage\"\r\n\r\n\r\n\r\n// class Fire {\r\n//   constructor() {\r\n//     this.init();    // this init will inislize our fire base will our project \r\n//     this.observeAuth();\r\n//   }\r\n\r\n//   // connection to the firebase database, unique credentials from Project Settings>Your apps\r\n//   init = () => {\r\n  \r\n//       firebase.initializeApp({\r\n//         apiKey: \"AIzaSyBKNb6-9YZTagBqbvxqwnnGE3UAXNi0sjw\",\r\n//     authDomain: \"realtime-7373d.firebaseapp.com\",\r\n//     databaseURL: \"https://realtime-7373d-default-rtdb.firebaseio.com\",\r\n//     projectId: \"realtime-7373d\",\r\n//     storageBucket: \"realtime-7373d.appspot.com\",\r\n//     messagingSenderId: \"634481680479\",\r\n//     appId: \"1:634481680479:web:d0af96f8d573be0262bbea\",\r\n//     measurementId: \"G-JS41HKH14D\"\r\n//       });\r\n//   };\r\n\r\n//   // this will auth our user\r\n//   observeAuth = () =>\r\n//     firebase.auth().onAuthStateChanged(this.onAuthStateChanged);\r\n\r\n//   // authenticating user and allowing anonymous users   how send the msg\r\n//   onAuthStateChanged = user => {\r\n//     if (!user) {\r\n//       try {\r\n//         firebase.auth().signInAnonymously();\r\n//       } catch ({ message }) {\r\n//         alert(message);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // getting unique credentials(id) for the sender \r\n//   get uid() {\r\n//     return (firebase.auth().currentUser || {}).uid;\r\n//   }\r\n\r\n//   // referencing the 'messages' table in the firebase database  //ref mean the node(table) in data base \r\n//   get ref() {\r\n//     return firebase.database().ref('messages');\r\n//   }\r\n\r\n//   // formating the message in order to be displayed nicely\r\n//   parse = snapshot => {\r\n//     const { timestamp: numberStamp, text, user } = snapshot.val();\r\n//     const { key: _id } = snapshot;\r\n//     const timestamp = new Date(numberStamp);\r\n//     const message = {\r\n//       _id,\r\n//       timestamp,\r\n//       text,\r\n//       user,\r\n//     };\r\n//     return message;\r\n//   };\r\n\r\n//   // getting messages to be displayed from the database   // get msg from data base\r\n//   on = callback =>\r\n//     this.ref\r\n//       .limitToLast(20)\r\n//       .on('child_added', snapshot => callback(this.parse(snapshot)));\r\n\r\n//   // timestamp for the message\r\n//   get timestamp() {\r\n//     return firebase.database.ServerValue.TIMESTAMP;\r\n//   }\r\n\r\n//   // sending message to be stored in the database\r\n//   send = messages => {\r\n//     for (let i = 0; i < messages.length; i++) {\r\n//       const { text, user } = messages[i];\r\n//       const message = {\r\n//         text,\r\n//         user,\r\n//         timestamp: this.timestamp,\r\n//       };\r\n//       this.append(message);\r\n//     }\r\n//   };\r\n\r\n//   // appening the message in the chat\r\n//   append = message => this.ref.push(message);\r\n\r\n//   // closing connection\r\n//   off() {\r\n//     this.ref.off();\r\n//   }\r\n// }\r\n\r\n// Fire.shared = new Fire();\r\n// export default Fire;\r\n\r\n\r\n\r\n// //  // Initialize Firebase\r\n// // //  firebase.initializeApp(firebaseConfig);\r\n// //  const storage = firebase.storage();\r\n// //  export { storage, firebase as default};"]},"metadata":{},"sourceType":"script"}